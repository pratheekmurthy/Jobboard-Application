[{"/home/pratheek/Desktop/React/React-II/jobboard1/src/index.js":"1","/home/pratheek/Desktop/React/React-II/jobboard1/src/App.js":"2","/home/pratheek/Desktop/React/React-II/jobboard1/src/Admin.js":"3","/home/pratheek/Desktop/React/React-II/jobboard1/src/adminContainer.js":"4","/home/pratheek/Desktop/React/React-II/jobboard1/src/Job.js":"5","/home/pratheek/Desktop/React/React-II/jobboard1/src/Apply.js":"6","/home/pratheek/Desktop/React/React-II/jobboard1/src/form.js":"7","/home/pratheek/Desktop/React/React-II/jobboard1/src/Home.js":"8"},{"size":219,"mtime":1607671912116,"results":"9","hashOfConfig":"10"},{"size":575,"mtime":1607943323698,"results":"11","hashOfConfig":"10"},{"size":713,"mtime":1607849288300,"results":"12","hashOfConfig":"10"},{"size":703,"mtime":1607849164217,"results":"13","hashOfConfig":"10"},{"size":5287,"mtime":1607874880776,"results":"14","hashOfConfig":"10"},{"size":655,"mtime":1608215808336,"results":"15","hashOfConfig":"10"},{"size":4726,"mtime":1608215749824,"results":"16","hashOfConfig":"10"},{"size":1294,"mtime":1608906297459,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1hj4p0g",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/pratheek/Desktop/React/React-II/jobboard1/src/index.js",[],["38","39"],"/home/pratheek/Desktop/React/React-II/jobboard1/src/App.js",[],"/home/pratheek/Desktop/React/React-II/jobboard1/src/Admin.js",[],"/home/pratheek/Desktop/React/React-II/jobboard1/src/adminContainer.js",[],"/home/pratheek/Desktop/React/React-II/jobboard1/src/Job.js",["40"],"import React, { useState,useEffect } from 'react'\nimport axios from 'axios'\nimport {toast} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport {Modal } from 'react-bootstrap'\n\ntoast.configure()\n\nconst Job = (props)=>{\n    const { job1,profiles } = props\n    const [candidate,setCandidate] = useState(\"\")\n    const [show,setShow] =useState(false)\n\n    const shortlistnotify =()=>{\n        toast.success(\"Shortlisted\",{position: toast.POSITION.TOP_CENTER, autoClose : 2000 })\n    }\n\n    const rejectnotify=()=>{\n        toast.error(\"Rejected\",{position: toast.POSITION.TOP_CENTER,autoClose : 2000})\n    }\n    \n    const applications = profiles.filter((applicant)=>{\n        return applicant.jobTitle === job1\n    })\n\n    const handleDetails =(id)=>{\n        axios.get(`http://dct-application-form.herokuapp.com/users/application-form/${id}`)\n                .then((response)=>{\n                    const result = response.data\n                    setCandidate(result);\n                    setShow(true)\n                    \n                })//success\n                .catch((err)=>{\n                    alert(err.message);\n                }) //error\n              \n    }\n\n    const shortlisted=(id)=>{\n        const element = id;\n        axios.put(`http://dct-application-form.herokuapp.com/users/application-form/update/${element}`,{\n            \"status\": \"shortlisted\"\n            })\n        .then((response)=>{\n            const result = response.data\n            console.log(result);\n        })\n        .catch((err)=>{\n            alert(err.message)\n        })\n    }\n\n    const rejected =(id)=>{\n            const element = id;\n            axios.put(`http://dct-application-form.herokuapp.com/users/application-form/update/${element}`,{\n                \"status\": \"rejected\"\n                })\n            .then((response)=>{\n                const result = response.data\n                console.log(result);\n            })\n            .catch((err)=>{\n                alert(err.message)\n            })\n        \n    }\n\n    const handleClose=()=>{\n        setShow(false)\n    }\n\n    \n\n    \n\n    return (\n        <div>\n            <h3>{job1}</h3>\n            <p>List of Candidates applied for {job1} job</p>\n            <table class =\"table\">\n                <tr>\n                    <th>Name</th>\n                    <th>Technical Details</th>\n                    <th>Experience</th>\n                    <th>Applied Date</th>\n                    <th>View Details</th>\n                    <th>Update Application Status</th>\n                </tr>\n                <tbody>\n                    {\n                        applications.map((ele)=>{\n                            return (\n                                <tr>\n                                    <td>{ele.name}</td>\n                                    <td>{ele.skills}</td>\n                                    <td>{ele.experience}</td>\n                                    <td>{ele.createdAt.slice(0, 10)}</td>\n                                    <td><button type=\"button\" class=\"btn btn-primary\" key={ele._id} onClick={()=>{\n                                        handleDetails(ele._id)\n                                    }}>View Details</button></td>\n                                    {\n                                        ele.status === \"applied\" && (<td><button type=\"button\" class=\"btn btn-success\" onClick={()=>{\n                                            shortlistnotify()\n                                            shortlisted(ele._id)\n                                        }}>shortlist</button><button type=\"button\" class=\"btn btn-danger\" onClick={()=>{\n                                            rejectnotify()\n                                            rejected(ele._id)\n                                        }}>reject</button></td>)\n                                    }\n                                    {\n                                            ele.status === \"rejected\" && (<td><button type=\"button\" class=\"btn btn-primary\" disabled=\"true\">rejected</button></td>)\n                                    }\n                                    {\n                                            ele.status === \"shortlisted\" && (<td><button type=\"button\" class=\"btn btn-primary\" disabled=\"true\">shortlisted</button></td>)\n                                    }   \n                                </tr>\n                                \n                            )\n                        })\n                    }\n                </tbody>\n            </table>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>{candidate.name}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p> Contact number: {candidate.phone}</p>\n                    <p> Email: {candidate.email}</p>\n                    <p> Skills: {candidate.skills}</p>\n                    <p> Experience: {candidate.experience}</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button type=\"button\" class=\"btn btn-primary\" onClick={handleClose} >Close</button>\n                </Modal.Footer>\n            </Modal>\n            \n        </div>\n    )\n}\n\nexport default Job","/home/pratheek/Desktop/React/React-II/jobboard1/src/Apply.js",["41","42"],"import React,{useState} from 'react'\nimport Form from './form'\nimport axios from 'axios'\nimport Admin from './Admin'\n\nconst Apply =(props)=>{\n\n\nconst formSubmit=(data)=>{\n    console.log(\"data\",data);\n    axios.post(\"http://dct-application-form.herokuapp.com/users/application-form\",data)\n        .then((response)=>{\n            const result = response.data;\n            console.log(result); \n            // window.location.reload();\n        })\n        .catch((err)=>{\n            console.log(err.message);\n        })\n        \n    }\n\n    return (\n        <div>\n            <Form formSubmit={formSubmit} />\n        </div>\n    ) \n\n}\n\nexport default Apply\n\n\n","/home/pratheek/Desktop/React/React-II/jobboard1/src/form.js",["43","44","45","46"],"import React,{useState} from 'react'\nimport axios from 'axios'\nimport './App.css'\nimport Modal from 'react-modal'\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport Apply from './Apply'\n\n\n\nconst formSchema = Yup.object().shape(({\n       \n        name : Yup.string().required(),\n        email : Yup.string().required().email(),\n        phone :Yup.string().required(),\n        experience :Yup.string().required(),\n        jobTitle :Yup.string().required(),\n        skills :Yup.string().required()\n}))\n\nconst Form =(props)=>{\n    \n    const {formSubmit} = props\n    return(<div>\n       <Formik initialValues ={{\n           \n           name: \"\",\n           email:\"\",\n           phone :\"\",\n           skills :\"\",\n           jobTitle :\"\",\n           experience :\"\"\n           \n           \n\n       }}\n validationSchema ={formSchema}\n       \n       onSubmit={(data,onSubmitProps)=> {formSubmit(data) \n       onSubmitProps.resetForm()} }>\n           {({\n               handleSubmit,\n               handleChange,\n               handleBlur,\n               values,\n               errors,\n               touched,\n               resetForm\n            \n           })=>{\n            // console.log(errors)\n               return( <div >\n                   <div class=\"font\">\n                   <div class=\"col d-flex justify-content-center\" >\n                <div class=\"card\" style={{width: \"30rem\", height:\"35rem\" }}>\n                <div class=\"card-body\">\n                <form onSubmit ={handleSubmit}>\n                    <tabel>\n                       <div>\n                           <tr>\n                               <td><label >Name :</label></td>\n                               <td><input type =\"text\" name={\"name\"} value={values.name} onChange={handleChange} onBlur={handleBlur} placeholder={\"name\"}/>{errors.name && touched.name && <p>{errors.name}</p>}</td>\n                           </tr>\n                            <tr>\n                                <td> <label >Email :  </label></td>\n                                <td><input type =\"text\" name={\"email\"} value={values.email} onChange={handleChange} onBlur={handleBlur} placeholder={\"email\"}/>{errors.email && touched.email && <p>{errors.email}</p>}</td>\n                            </tr>\n                            <tr>\n                                <td><label >Phone : </label></td>\n                                <td><input type =\"text\" name={\"phone\"} value={values.Phone} onChange={handleChange} onBlur={handleBlur} placeholder={\"+91 990 000 0001\"}/>{errors.phone && touched.phone && <p>{errors.phone}</p>}</td>\n                            </tr>\n                            <tr>\n                                <td><label >Experience : </label></td>\n                                <td><input type =\"text\" name={\"experience\"} value={values.experience} onChange={handleChange} onBlur={handleBlur} placeholder={\"2 years 3 months\"}/>{errors.experience && touched.experience && <p>{errors.experience}</p>}</td>\n                            </tr>\n                            <tr>\n                                <td><label>Applying for Job : </label></td>\n                                <td> <select name={\"jobTitle\"} value={values.jobTitle} onChange={handleChange} onBlur={handleBlur} >\n                                <option value=\"\">select Job</option>\n                               <option value=\"Front-End Developer\"> Front-End Developer</option>\n                               <option value=\"Node.js Developer\"> Node js Developer</option>\n                               <option value=\"MEAN Stack Developer\"> MEAN Stack Developer</option>\n                               <option value=\"FULL Stack Developer\"> FULL Stack Developer</option>\n                           </select>{errors.jobTitle && touched.jobTitle && <p>{errors.jobTitle}</p>}<br/>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td><label >Skills : </label></td>\n                                <td><input type =\"text\" name={\"skills\"} value={values.skills} onChange={handleChange} onBlur={handleBlur} placeholder={\"HTML,CSS,Javascript\"}/>{errors.skills && touched.skills && <p>{errors.skills}</p>}</td>\n                            </tr>\n                            <tr><td></td>\n                           <td><button className=\"Button\" id=\"submit\" type={\"submit\"}>submit</button></td></tr>\n                       </div>\n                       </tabel>\n                   </form>\n                   </div>\n                </div>\n              </div>\n              </div>\n              </div>    \n               )\n           }}\n\n\n       </Formik>\n        \n    </div>)\n}\n\nexport default Form","/home/pratheek/Desktop/React/React-II/jobboard1/src/Home.js",["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":26,"nodeType":"55","messageId":"56","endLine":1,"endColumn":35},{"ruleId":"53","severity":1,"message":"57","line":1,"column":15,"nodeType":"55","messageId":"56","endLine":1,"endColumn":23},{"ruleId":"53","severity":1,"message":"58","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":13},{"ruleId":"53","severity":1,"message":"57","line":1,"column":15,"nodeType":"55","messageId":"56","endLine":1,"endColumn":23},{"ruleId":"53","severity":1,"message":"59","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":13},{"ruleId":"53","severity":1,"message":"60","line":4,"column":8,"nodeType":"55","messageId":"56","endLine":4,"endColumn":13},{"ruleId":"53","severity":1,"message":"61","line":7,"column":8,"nodeType":"55","messageId":"56","endLine":7,"endColumn":13},{"ruleId":"53","severity":1,"message":"62","line":2,"column":9,"nodeType":"55","messageId":"56","endLine":2,"endColumn":13},{"ruleId":"63","severity":1,"message":"64","line":10,"column":7,"nodeType":"65","endLine":10,"endColumn":11},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Admin' is defined but never used.","'axios' is defined but never used.","'Modal' is defined but never used.","'Apply' is defined but never used.","'Link' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]